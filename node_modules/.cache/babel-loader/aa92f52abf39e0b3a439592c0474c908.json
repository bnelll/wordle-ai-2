{"ast":null,"code":"var _jsxFileName = \"/Users/brendannell/Downloads/NewPath_task/wordle-ai/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { InformationCircleIcon } from '@heroicons/react/outline';\nimport { ChartBarIcon } from '@heroicons/react/outline';\nimport { useState, useEffect } from 'react';\nimport { Alert } from './components/alerts/Alert';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { AboutModal } from './components/modals/AboutModal';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { StatsModal } from './components/modals/StatsModal';\nimport { WIN_MESSAGES } from './constants/strings';\nimport { isWordInWordList, isWinningWord, solution } from './lib/words';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { loadGameStateFromLocalStorage, saveGameStateToLocalStorage } from './lib/localStorage'; // BEGIN CHANGES\n\nimport { AutoCounter } from './components/timer/timer'; // END CHANGES\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALERT_TIME_MS = 2000; // BEGIN CHANGES\n\nvar TIME = \"00:00:00\"; // END CHANGES\n\nfunction App() {\n  _s();\n\n  // BEGIN CHANGES\n  const counter = AutoCounter(); // END CHANGES\n\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false);\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false);\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [successAlert, setSuccessAlert] = useState('');\n  const [guesses, setGuesses] = useState(() => {\n    const loaded = loadGameStateFromLocalStorage();\n\n    if ((loaded === null || loaded === void 0 ? void 0 : loaded.solution) !== solution) {\n      return [];\n    }\n\n    const gameWasWon = loaded.guesses.includes(solution);\n\n    if (gameWasWon) {\n      setIsGameWon(true);\n    }\n\n    if (loaded.guesses.length === 6 && !gameWasWon) {\n      setIsGameLost(true);\n    }\n\n    return loaded.guesses;\n  });\n  const [stats, setStats] = useState(() => loadStats()); // BEGIN CHANGES\n\n  stats.totalTime = TIME; // END CHANGES\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({\n      guesses,\n      solution\n    });\n  }, [guesses]);\n  useEffect(() => {\n    if (isGameWon) {\n      setSuccessAlert(WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]);\n      setTimeout(() => {\n        setSuccessAlert('');\n        setIsStatsModalOpen(true);\n      }, ALERT_TIME_MS);\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true);\n      }, ALERT_TIME_MS);\n    }\n  }, [isGameWon, isGameLost]);\n\n  const onChar = value => {\n    if (currentGuess.length < 5 && guesses.length < 6 && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`);\n    }\n  };\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1));\n  };\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(currentGuess.length === 5)) {\n      setIsNotEnoughLetters(true);\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false);\n      }, ALERT_TIME_MS);\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true);\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false);\n      }, ALERT_TIME_MS);\n    }\n\n    const winningWord = isWinningWord(currentGuess);\n\n    if (currentGuess.length === 5 && guesses.length < 6 && !isGameWon) {\n      setGuesses([...guesses, currentGuess]);\n      setCurrentGuess('');\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length));\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === 5) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        setIsGameLost(true);\n      }\n    }\n  }; // BEGIN CHANGES\n\n\n  if (isGameWon == isGameLost) {\n    TIME = new Date(counter * 1000).toISOString().substr(11, 8);\n  } // END CHANGES\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"py-8 max-w-7xl mx-auto sm:px-6 lg:px-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", TIME, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex w-80 mx-auto items-center mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl grow font-bold\",\n        children: \"Not Wordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InformationCircleIcon, {\n        className: \"h-6 w-6 cursor-pointer\",\n        onClick: () => setIsInfoModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartBarIcon, {\n        className: \"h-6 w-6 cursor-pointer\",\n        onClick: () => setIsStatsModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      guesses: guesses,\n      currentGuess: currentGuess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      onChar: onChar,\n      onDelete: onDelete,\n      onEnter: onEnter,\n      guesses: guesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n      isOpen: isInfoModalOpen,\n      handleClose: () => setIsInfoModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatsModal, {\n      isOpen: isStatsModalOpen,\n      handleClose: () => setIsStatsModalOpen(false),\n      guesses: guesses,\n      gameStats: stats,\n      isGameLost: isGameLost,\n      isGameWon: isGameWon,\n      handleShare: () => {\n        setSuccessAlert('Game copied to clipboard');\n        return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AboutModal, {\n      isOpen: isAboutModalOpen,\n      handleClose: () => setIsAboutModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 select-none\",\n      onClick: () => setIsAboutModalOpen(true),\n      children: \"About this game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: \"Not enough letters\",\n      isOpen: isNotEnoughLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: \"Word not found\",\n      isOpen: isWordNotFoundAlertOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: `The word was ${solution}`,\n      isOpen: isGameLost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: successAlert,\n      isOpen: successAlert !== '',\n      variant: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XHJkxqFNUru27yBluIGtx5C3CW4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/brendannell/Downloads/NewPath_task/wordle-ai/src/App.tsx"],"names":["InformationCircleIcon","ChartBarIcon","useState","useEffect","Alert","Grid","Keyboard","AboutModal","InfoModal","StatsModal","WIN_MESSAGES","isWordInWordList","isWinningWord","solution","addStatsForCompletedGame","loadStats","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","AutoCounter","ALERT_TIME_MS","TIME","App","counter","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isAboutModalOpen","setIsAboutModalOpen","isNotEnoughLetters","setIsNotEnoughLetters","isStatsModalOpen","setIsStatsModalOpen","isWordNotFoundAlertOpen","setIsWordNotFoundAlertOpen","isGameLost","setIsGameLost","successAlert","setSuccessAlert","guesses","setGuesses","loaded","gameWasWon","includes","length","stats","setStats","totalTime","Math","floor","random","setTimeout","onChar","value","onDelete","slice","onEnter","winningWord","Date","toISOString","substr"],"mappings":";;;AAAA,SAASA,qBAAT,QAAsC,0BAAtC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,KAAT,QAAsB,2BAAtB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,QAAT,QAAyB,gCAAzB;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,QAA1C,QAA0D,aAA1D;AACA,SAASC,wBAAT,EAAmCC,SAAnC,QAAoD,aAApD;AACA,SACEC,6BADF,EAEEC,2BAFF,QAGO,oBAHP,C,CAKA;;AACA,SAASC,WAAT,QAA4B,0BAA5B,C,CACA;;;AAEA,MAAMC,aAAa,GAAG,IAAtB,C,CAEA;;AACA,IAAIC,IAAI,GAAG,UAAX,C,CACA;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAMC,OAAO,GAAGJ,WAAW,EAA3B,CAFa,CAGb;;AAEA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCtB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACuB,SAAD,EAAYC,YAAZ,IAA4BxB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACyB,eAAD,EAAkBC,kBAAlB,IAAwC1B,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAAC2B,gBAAD,EAAmBC,mBAAnB,IAA0C5B,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAAC6B,kBAAD,EAAqBC,qBAArB,IAA8C9B,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAAC+B,gBAAD,EAAmBC,mBAAnB,IAA0ChC,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACiC,uBAAD,EAA0BC,0BAA1B,IAAwDlC,QAAQ,CAAC,KAAD,CAAtE;AACA,QAAM,CAACmC,UAAD,EAAaC,aAAb,IAA8BpC,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACqC,YAAD,EAAeC,eAAf,IAAkCtC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACuC,OAAD,EAAUC,UAAV,IAAwBxC,QAAQ,CAAW,MAAM;AACrD,UAAMyC,MAAM,GAAG3B,6BAA6B,EAA5C;;AACA,QAAI,CAAA2B,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAE9B,QAAR,MAAqBA,QAAzB,EAAmC;AACjC,aAAO,EAAP;AACD;;AACD,UAAM+B,UAAU,GAAGD,MAAM,CAACF,OAAP,CAAeI,QAAf,CAAwBhC,QAAxB,CAAnB;;AACA,QAAI+B,UAAJ,EAAgB;AACdlB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AACD,QAAIiB,MAAM,CAACF,OAAP,CAAeK,MAAf,KAA0B,CAA1B,IAA+B,CAACF,UAApC,EAAgD;AAC9CN,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;;AACD,WAAOK,MAAM,CAACF,OAAd;AACD,GAbqC,CAAtC;AAeA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoB9C,QAAQ,CAAC,MAAMa,SAAS,EAAhB,CAAlC,CA7Ba,CA+Bb;;AACAgC,EAAAA,KAAK,CAACE,SAAN,GAAkB7B,IAAlB,CAhCa,CAiCb;;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,2BAA2B,CAAC;AAAEwB,MAAAA,OAAF;AAAW5B,MAAAA;AAAX,KAAD,CAA3B;AACD,GAFQ,EAEN,CAAC4B,OAAD,CAFM,CAAT;AAIAtC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,SAAJ,EAAe;AACbe,MAAAA,eAAe,CACb9B,YAAY,CAACwC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB1C,YAAY,CAACoC,MAAxC,CAAD,CADC,CAAf;AAGAO,MAAAA,UAAU,CAAC,MAAM;AACfb,QAAAA,eAAe,CAAC,EAAD,CAAf;AACAN,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,OAHS,EAGPf,aAHO,CAAV;AAID;;AACD,QAAIkB,UAAJ,EAAgB;AACdgB,MAAAA,UAAU,CAAC,MAAM;AACfnB,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,OAFS,EAEPf,aAFO,CAAV;AAGD;AACF,GAfQ,EAeN,CAACM,SAAD,EAAYY,UAAZ,CAfM,CAAT;;AAiBA,QAAMiB,MAAM,GAAIC,KAAD,IAAmB;AAChC,QAAIhC,YAAY,CAACuB,MAAb,GAAsB,CAAtB,IAA2BL,OAAO,CAACK,MAAR,GAAiB,CAA5C,IAAiD,CAACrB,SAAtD,EAAiE;AAC/DD,MAAAA,eAAe,CAAE,GAAED,YAAa,GAAEgC,KAAM,EAAzB,CAAf;AACD;AACF,GAJD;;AAMA,QAAMC,QAAQ,GAAG,MAAM;AACrBhC,IAAAA,eAAe,CAACD,YAAY,CAACkC,KAAb,CAAmB,CAAnB,EAAsB,CAAC,CAAvB,CAAD,CAAf;AACD,GAFD;;AAIA,QAAMC,OAAO,GAAG,MAAM;AACpB,QAAIjC,SAAS,IAAIY,UAAjB,EAA6B;AAC3B;AACD;;AACD,QAAI,EAAEd,YAAY,CAACuB,MAAb,KAAwB,CAA1B,CAAJ,EAAkC;AAChCd,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACA,aAAOqB,UAAU,CAAC,MAAM;AACtBrB,QAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,OAFgB,EAEdb,aAFc,CAAjB;AAGD;;AAED,QAAI,CAACR,gBAAgB,CAACY,YAAD,CAArB,EAAqC;AACnCa,MAAAA,0BAA0B,CAAC,IAAD,CAA1B;AACA,aAAOiB,UAAU,CAAC,MAAM;AACtBjB,QAAAA,0BAA0B,CAAC,KAAD,CAA1B;AACD,OAFgB,EAEdjB,aAFc,CAAjB;AAGD;;AAED,UAAMwC,WAAW,GAAG/C,aAAa,CAACW,YAAD,CAAjC;;AAEA,QAAIA,YAAY,CAACuB,MAAb,KAAwB,CAAxB,IAA6BL,OAAO,CAACK,MAAR,GAAiB,CAA9C,IAAmD,CAACrB,SAAxD,EAAmE;AACjEiB,MAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAalB,YAAb,CAAD,CAAV;AACAC,MAAAA,eAAe,CAAC,EAAD,CAAf;;AAEA,UAAImC,WAAJ,EAAiB;AACfX,QAAAA,QAAQ,CAAClC,wBAAwB,CAACiC,KAAD,EAAQN,OAAO,CAACK,MAAhB,CAAzB,CAAR;AACA,eAAOpB,YAAY,CAAC,IAAD,CAAnB;AACD;;AAED,UAAIe,OAAO,CAACK,MAAR,KAAmB,CAAvB,EAA0B;AACxBE,QAAAA,QAAQ,CAAClC,wBAAwB,CAACiC,KAAD,EAAQN,OAAO,CAACK,MAAR,GAAiB,CAAzB,CAAzB,CAAR;AACAR,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF;AACF,GAlCD,CAlEa,CAsGb;;;AACA,MAAGb,SAAS,IAAIY,UAAhB,EAA4B;AAC1BjB,IAAAA,IAAI,GAAG,IAAIwC,IAAJ,CAAStC,OAAO,GAAC,IAAjB,EAAuBuC,WAAvB,GAAqCC,MAArC,CAA4C,EAA5C,EAA+C,CAA/C,CAAP;AACD,GAzGY,CA0Gb;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,wCAAf;AAAA,4BAGE;AAAA,sBAAQ1C,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAME;AAAK,MAAA,SAAS,EAAC,qCAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,wBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,qBAAD;AACE,QAAA,SAAS,EAAC,wBADZ;AAEE,QAAA,OAAO,EAAE,MAAMQ,kBAAkB,CAAC,IAAD;AAFnC;AAAA;AAAA;AAAA;AAAA,cAFF,eAME,QAAC,YAAD;AACE,QAAA,SAAS,EAAC,wBADZ;AAEE,QAAA,OAAO,EAAE,MAAMM,mBAAmB,CAAC,IAAD;AAFpC;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAiBE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEO,OAAf;AAAwB,MAAA,YAAY,EAAElB;AAAtC;AAAA;AAAA;AAAA;AAAA,YAjBF,eAkBE,QAAC,QAAD;AACE,MAAA,MAAM,EAAE+B,MADV;AAEE,MAAA,QAAQ,EAAEE,QAFZ;AAGE,MAAA,OAAO,EAAEE,OAHX;AAIE,MAAA,OAAO,EAAEjB;AAJX;AAAA;AAAA;AAAA;AAAA,YAlBF,eAwBE,QAAC,SAAD;AACE,MAAA,MAAM,EAAEd,eADV;AAEE,MAAA,WAAW,EAAE,MAAMC,kBAAkB,CAAC,KAAD;AAFvC;AAAA;AAAA;AAAA;AAAA,YAxBF,eA4BE,QAAC,UAAD;AACE,MAAA,MAAM,EAAEK,gBADV;AAEE,MAAA,WAAW,EAAE,MAAMC,mBAAmB,CAAC,KAAD,CAFxC;AAGE,MAAA,OAAO,EAAEO,OAHX;AAIE,MAAA,SAAS,EAAEM,KAJb;AAKE,MAAA,UAAU,EAAEV,UALd;AAME,MAAA,SAAS,EAAEZ,SANb;AAOE,MAAA,WAAW,EAAE,MAAM;AACjBe,QAAAA,eAAe,CAAC,0BAAD,CAAf;AACA,eAAOa,UAAU,CAAC,MAAMb,eAAe,CAAC,EAAD,CAAtB,EAA4BrB,aAA5B,CAAjB;AACD;AAVH;AAAA;AAAA;AAAA;AAAA,YA5BF,eAwCE,QAAC,UAAD;AACE,MAAA,MAAM,EAAEU,gBADV;AAEE,MAAA,WAAW,EAAE,MAAMC,mBAAmB,CAAC,KAAD;AAFxC;AAAA;AAAA;AAAA;AAAA,YAxCF,eA6CE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,4OAFZ;AAGE,MAAA,OAAO,EAAE,MAAMA,mBAAmB,CAAC,IAAD,CAHpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA7CF,eAqDE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,oBAAf;AAAoC,MAAA,MAAM,EAAEC;AAA5C;AAAA;AAAA;AAAA;AAAA,YArDF,eAsDE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,gBAAf;AAAgC,MAAA,MAAM,EAAEI;AAAxC;AAAA;AAAA;AAAA;AAAA,YAtDF,eAuDE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAG,gBAAetB,QAAS,EAAzC;AAA4C,MAAA,MAAM,EAAEwB;AAApD;AAAA;AAAA;AAAA;AAAA,YAvDF,eAwDE,QAAC,KAAD;AACE,MAAA,OAAO,EAAEE,YADX;AAEE,MAAA,MAAM,EAAEA,YAAY,KAAK,EAF3B;AAGE,MAAA,OAAO,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,YAxDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgED;;GA5KQlB,G;;KAAAA,G;AA8KT,eAAeA,GAAf","sourcesContent":["import { InformationCircleIcon } from '@heroicons/react/outline'\nimport { ChartBarIcon } from '@heroicons/react/outline'\nimport { useState, useEffect } from 'react'\nimport { Alert } from './components/alerts/Alert'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { AboutModal } from './components/modals/AboutModal'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport { WIN_MESSAGES } from './constants/strings'\nimport { isWordInWordList, isWinningWord, solution } from './lib/words'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport {\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n} from './lib/localStorage'\n\n// BEGIN CHANGES\nimport { AutoCounter } from './components/timer/timer'\n// END CHANGES\n\nconst ALERT_TIME_MS = 2000\n\n// BEGIN CHANGES\nvar TIME = \"00:00:00\"\n// END CHANGES\n\nfunction App() {\n  // BEGIN CHANGES\n  const counter = AutoCounter()\n  // END CHANGES\n\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false)\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false)\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [successAlert, setSuccessAlert] = useState('')\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    const loaded = loadGameStateFromLocalStorage()\n    if (loaded?.solution !== solution) {\n      return []\n    }\n    const gameWasWon = loaded.guesses.includes(solution)\n    if (gameWasWon) {\n      setIsGameWon(true)\n    }\n    if (loaded.guesses.length === 6 && !gameWasWon) {\n      setIsGameLost(true)\n    }\n    return loaded.guesses\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  // BEGIN CHANGES\n  stats.totalTime = TIME\n  // END CHANGES\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({ guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      setSuccessAlert(\n        WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n      )\n      setTimeout(() => {\n        setSuccessAlert('')\n        setIsStatsModalOpen(true)\n      }, ALERT_TIME_MS)\n    }\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true)\n      }, ALERT_TIME_MS)\n    }\n  }, [isGameWon, isGameLost])\n\n  const onChar = (value: string) => {\n    if (currentGuess.length < 5 && guesses.length < 6 && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1))\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n    if (!(currentGuess.length === 5)) {\n      setIsNotEnoughLetters(true)\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false)\n      }, ALERT_TIME_MS)\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true)\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false)\n      }, ALERT_TIME_MS)\n    }\n\n    const winningWord = isWinningWord(currentGuess)\n\n    if (currentGuess.length === 5 && guesses.length < 6 && !isGameWon) {\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess('')\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length))\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === 5) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        setIsGameLost(true)\n      }\n    }\n  }\n\n  // BEGIN CHANGES\n  if(isGameWon == isGameLost) {\n    TIME = new Date(counter*1000).toISOString().substr(11,8)\n  }\n  // END CHANGES\n  \n  return (\n    <div className=\"py-8 max-w-7xl mx-auto sm:px-6 lg:px-8\">\n\n      {/* BEGIN CHANGES */}\n      <div> { TIME } </div>\n      {/* END CHANGES */}\n      \n      <div className=\"flex w-80 mx-auto items-center mb-8\">\n        <h1 className=\"text-xl grow font-bold\">Not Wordle</h1>\n        <InformationCircleIcon\n          className=\"h-6 w-6 cursor-pointer\"\n          onClick={() => setIsInfoModalOpen(true)}\n        />\n        <ChartBarIcon\n          className=\"h-6 w-6 cursor-pointer\"\n          onClick={() => setIsStatsModalOpen(true)}\n        />\n      </div>\n      <Grid guesses={guesses} currentGuess={currentGuess} />\n      <Keyboard\n        onChar={onChar}\n        onDelete={onDelete}\n        onEnter={onEnter}\n        guesses={guesses}\n      />\n      <InfoModal\n        isOpen={isInfoModalOpen}\n        handleClose={() => setIsInfoModalOpen(false)}\n      />\n      <StatsModal\n        isOpen={isStatsModalOpen}\n        handleClose={() => setIsStatsModalOpen(false)}\n        guesses={guesses}\n        gameStats={stats}\n        isGameLost={isGameLost}\n        isGameWon={isGameWon}\n        handleShare={() => {\n          setSuccessAlert('Game copied to clipboard')\n          return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS)\n        }}\n      />\n      <AboutModal\n        isOpen={isAboutModalOpen}\n        handleClose={() => setIsAboutModalOpen(false)}\n      />\n\n      <button\n        type=\"button\"\n        className=\"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 select-none\"\n        onClick={() => setIsAboutModalOpen(true)}\n      >\n        About this game\n      </button>\n\n      <Alert message=\"Not enough letters\" isOpen={isNotEnoughLetters} />\n      <Alert message=\"Word not found\" isOpen={isWordNotFoundAlertOpen} />\n      <Alert message={`The word was ${solution}`} isOpen={isGameLost} />\n      <Alert\n        message={successAlert}\n        isOpen={successAlert !== ''}\n        variant=\"success\"\n      />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}